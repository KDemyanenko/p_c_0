fn main() {
    const SIZE: usize = 11;
    let center = SIZE / 2;
    let mut output = String::new();

    for i in 0..=center {
        output.push_str(&" ".repeat(center - i));
        output.push_str(&"*".repeat(2 * i + 1));
        output.push('\n');
    }

    for i in (0..center).rev() {
        output.push_str(&" ".repeat(center - i));
        output.push_str(&"*".repeat(2 * i + 1));
        output.push('\n');
    }

    print!("{}", output); 
}




Пояснення, як я "це" зробив і чому саме так.



Розмір ромба я задав константою SIZE, яка дорівнює 11. 

Спочатку я визначив центр ромба, поділивши SIZE на 2. Це мені допоможе правильно позиціонувати пробіли і зірочки для малювання верхньої частини ромба.

Потім я використав цикл for, щоб пройтися від 0 до центру (включно). Для кожної ітерації я додаю пробіли перед зірочками, щоб вирівняти їх по центру. Я використав метод repeat, щоб згенерувати рядки пробілів і зірочок. repeat(center - i) означає, що я додаватиму стільки пробілів, скільки потрібно для вирівнювання, а repeat(2 * i + 1) генерує потрібну кількість зірочок для поточного рядка.

Після того як я намалював верхню частину ромба, я знову використовую цикл, щоб намалювати нижню частину. У цьому випадку я проходжу знову через цикл, але в зворотному порядку, від центру до 0. Логіка тут така ж, я знову використовую repeat для генерації пробілів і зірочок.

Оскільки програма повинна відповідати умовам, я  використовув тільки один print! в кінці, щоб вивести весь результат за один раз. Я зберігаю весь текст ромба в змінній output, і в кінці просто виводжу його. Це допомагає уникнути множинних виводів, які могли б бути менш ефективними.

У результаті я отримав ромб, поділений на дві частини, верхню і нижню, що відповідає всім умовам завдання.
